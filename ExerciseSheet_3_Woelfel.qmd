---
title: "Exercise #3"
subtitle: "Fortgeschrittene Statistische Software für NF"
author: "Luke Wölfel (12721083) "
date: "today"
format: 
  html: 
    self-contained: True
---

## General Remarks

-   You can submit your solutions in teams of up to 3 students.
-   Include all your team-member's names and student numbers
    (Matrikelnummern) in the `authors` field.
-   Please use the exercise template document to work on and submit your
    results.
-   Use a level 2 heading for each new exercise and answer each subtask
    next to its bullet points or use a new level 3 heading if you want.
-   Always render the R code for your solutions (`echo=TRUE`) and make
    sure to include the resulting data in your rendered document.
    -   Make sure to not print more than 10 rows of data (unless
        specifically instructed to).
-   Always submit both the rendered document(s) as well as your source
    Rmarkdown or Quarto document. Submit the files separately on moodle,
    **not** as a zip archive.
-   Submission format is HTML. Other formats will lead to a deduction of
    points.

## Exercise 1: Initializing git (4 Points)

For this whole exercise sheet we will be tracking all our changes to it
in git.

a)  Start by initializing a new R project with git support, called
    `2025-exeRcise-sheet-3`. If you forgot how to do this, you can
    follow this
    [guide](https://malikaihle.github.io/Introduction-RStudio-Git-GitHub/rstudio_project.html).
b)  Commit the files generated by Rstudio.
c)  For all of the following tasks in this exercise sheet we ask you to
    always commit your changes after finishing each subtask e.g. create
    a commit after task *1d*, *1e* etc.

> Note: This applies only to answers that have text or code as their
> answer. If you complete tasks in a different order or forget to commit
> one, this is no problem. If you change your answers you can just
> create multiple commits to track the changes.

d)  Name 2 strengths and 2 weaknesses of git. (Don't forget to create a
    commit after this answer, see *1c*)
    
#### Strengths
- When collaborating on a project, using git makes it easy to share files and 
keep track of changes.
- Another benefit is the ability to have a history of your files, which lets you 
revert changes and minimizes the risk of losing work.

#### Weaknesses 
- A potential weakness is that you have to explicitely use git, as opposed to it 
being something that you set up once and forget about.
- Git also only really works well on text files.
    
e)  Knit this exercise sheet. Some new files will automatically be
    generated when knitting the sheet e.g. the HTML page. Ignore these
    files, as we only want to track the source files themselves. You
    can, but don't need to create a `.gitignore` file. Just do not
    commit these files manually.

## Exercise 2: Putting your Repository on GitHub (3 Points)

For this task you will upload your solution to GitHub.

a)  Create a new repository on GitHub in your account named
    `exeRcise-sheet-3`. Make sure you create a **public repository** so
    we are able to see it for grading. Add the link to the repository
    below:
    
    <https://github.com/wolveluke/exeRcise-sheet-3>
    
b)  Push your code to this new repository by copying and executing the
    snippet on github listed under
    `…or push an existing repository from the command line`.
c)  Regularly push your latest changes to GitHub again and especially do
    so when you are finished with this sheet.

## Exercise 3: Pixar Films (4 Points)

Download the `pixar_films` and `public_response` datasets from the
GitHub repository and track them in git.

Link:
<https://github.com/rfordatascience/tidytuesday/tree/main/data/2025/2025-03-11>

For small datasets like these adding them to git is not a problem.

a)  Load the `pixar_films` dataset into R. Clean the dataset by removing
    films without a title. Inspect the variable `film_rating`. What are
    the possible values and what do they mean? Create a factor variable
    for the film rating. Why is this appropriate?
    
```{r}
library(tidyverse)
pixar_films <- read_csv("data/pixar_films.csv")

pixar_films <- pixar_films %>% drop_na(film)
```
- The `film_rating` variable tracks which audiences a film is considered appropriate 
for using categories defined by the "Motion Picture Association film rating system".
- This system has a total of five categories although it appears the Pixar films 
are either "G" or "PG" rated. 
- These ratings mean General Audiences, i.e. considered suitable for all ages and 
Parental Guidance Suggested, i.e. some parts may not be suitable for young children.

```{r}
# assuming "create a variable" means converting, because I don't see a reason to 
# create a new column
pixar_films <- pixar_films %>% mutate(film_rating = as_factor(film_rating))
```
- Creating a factor variable is appropriate, because there are only five possible 
values this variable can take.

<!-- -->

b)  Inspect the film titles manually. Which films form a film series? A
    film series can be identified by a common word in the titles of the
    films, often in conjunction with a number in the title,
    e.g. "Despicable Me" and "Despicable Me 2". Create a dataframe which
    displays a list of the different series with the titles of the films
    and how many films belong to the series. Output the dataframe.
    
```{r}
# creating column for series depending on common words
pixar_films_series <- pixar_films %>%
  mutate(series = case_when(str_detect(film,"Toy Story") ~ "Toy Story",
                            str_detect(film,"Monsters") ~ "Monsters, Inc",
                            str_detect(film,"Finding") ~ "Finding Nemo",
                            str_detect(film,"Incredibles") ~ "The Incredibles",
                            str_detect(film,"Cars") ~ "Cars",
                            .default = "none"))
# converting to simplified data frame
pixar_films_series_count <- pixar_films_series %>% 
  select(series, film) %>% 
  filter(series != "none") %>% 
  group_by(series) %>% 
  mutate(entries_in_series = n())

pixar_films_series_count %>% 
  arrange(series) %>% 
  head(10)
```


c)  Load the `public_response` dataframe into R. Convert the
    `cinema_score` variable into a factor while ensuring the factor
    levels are defined in ascending order, from the lowest to the
    highest score. Combine `public_response` with the `pixar_films`
    dataset using an appropriate merge variable.
    
```{r}
public_response <- read_csv("data/public_response.csv")

score_levels <- c("A+", "A", "A-")

public_response <- public_response %>% 
  mutate(cinema_score = as.factor(cinema_score),
         cinema_score = fct_relevel(cinema_score, 
                                    score_levels))
  
levels(public_response$cinema_score)

films_combined <- left_join(pixar_films_series, 
                            public_response, 
                            by = "film")
```
    

d)  Choose one of the variables representing the public response and
    create a bar plot for the films belonging to a series. Here are the
    details of the plot:

    -   The film series are represented on the x-axis.
    -   Your chosen public response variable is displayed on the y-axis.
    -   Each film in the series is represented as a separate bar. Bars
        are grouped by film under their respective series on the x-axis.
        Order the bars within a series according to the release date of
        the films.
    -   A title and axis labels for context.

    What do you notice when comparing the scores of the films in a
    series? Do you see any patterns?
    
```{r}
# selecting relevant films and making sure they are ordered correctly
films_plot_data <- films_combined %>% 
  filter(series != "none") %>% 
  mutate(release_date = ymd(release_date)) %>% 
  group_by(series) %>% 
  mutate(film = factor(film, levels = film[order(release_date)])) %>% 
  ungroup()

ggplot(films_plot_data,
       aes(x = series, 
           fill = film, 
           y = metacritic)) + 
  geom_bar(position = "dodge",
           stat = "identity") +
  coord_cartesian(ylim = c(0,100)) +
  labs(x = "Film Series",
       y = "Metacritic Score",
       fill = "Film Title",
       title = "Metacritic score of Pixar films in a film series")
```

- A comparison of the ratings of the films in a series shows that the second film 
is rated lower than the first across all series.

## Exercise 4: Open Analysis (4 points)

This exercise is a bit more open-ended. You can choose any dataset from
[Our World in Data](https://ourworldindata.org/) and analyze it, while
determining the research question yourself.

a)  Go to <https://github.com/owid/owid-datasets/tree/master/datasets>
    and choose a dataset that interests you. You can have a look at
    <https://ourworldindata.org/> to gather some inspiration.
b)  Download the dataset and track it in git.
c)  Put the name / title of the dataset and a link to it below.

-   Dataset Name: "Adult obesity by region - FAO (2017)"
-   Link: <https://github.com/owid/owid-datasets/tree/master/datasets/Adult%20obesity%20by%20region%20-%20FAO%20(2017)>

d)  Come up with a (research) question you want to answer with the data
    and briefly explain why you believe this is an interesting question
    within one sentence. It should be a question that can be answered
    with the dataset and using R.
    
#### Research Question
How much is obesity increasing across different regions of the world?

#### Motivation[^1]
[^1]: I believe the requirement to keep it within one sentence is unreasonable, which
is why I will try to keep it simple instead.

Obesity has been increasing across developed countries for a while and has become 
one of the leading risk factors of disease and death. Putting discussions of personal 
responsibility aside, on a population level it is certainly reasonable to treat obesity
as a disease and with the advent of drugs like ozempic, it might be entirely curable soon.
Even though these drugs are not particularly expensive to produce, they are very expensive to buy.
And while expiring patents will likely reduce prices, it might still be too much for people 
in developing countries. If obesity is on the rise at a problematic rate across the 
whole world, it may be worth looking into regulating the price of these drugs, so that 
everyone, not just those who are lucky enough to live in a rich country, may benefit.
    
e)  Use R to answer your chosen question. Please limit your analysis to
    the functions and techniques we have covered so far in the course.
    You are **not expected** to use advanced statistical models or
    external packages which haven't been introduced.
    
```{r}
obesity <- read_csv("data/Adult obesity by region - FAO (2017).csv")

obesity <- obesity %>% 
  rename("obesity_percentage_adults" = "Prevalence of obesity in adults (18+ years old) (FAO (2017))")

obesity %>% 
  group_by(Entity) %>% 
  mutate(pct_change = (obesity_percentage_adults/lag(obesity_percentage_adults)-1)*100,
         mean_change_recent = mean(pct_change[Year>2009])) %>% 
  filter(Year == 2014) %>% 
  select(Entity, Year, obesity_percentage_adults, mean_change_recent) %>% 
  knitr::kable(col.names = c("Region",
                             "Most Recent Year",
                             "Percentage of obesity in adult population",
                             "Average increase over the last 5 years"),
               digits = 2) 
  
```
As expected, this brief overview shows relatively high obesity in the "Western world".
However the rates of obesity in Latin America and the Carribean are also quite high and 
while Asia has the lowest absolute percentage, they have the highest percentage increase 
between 2010 and 2014. This trend will be visualized using a line chart in the next 
subtask.
    
f)  Create a meaningful plot / figure with the dataset. Make sure to
    provide a figure caption (via the chunk options / Rmarkdown) and
    correctly label the figure.

```{r}
#| label: fig-obesity_chart
#| fig-cap: "Line chart showing the growing trend of obesity on a global scale."
#| fig-width: 10
#| fig-heigth: 5
obesity_chart <- obesity %>% 
  ggplot(aes(x = Year,
             y = obesity_percentage_adults,
             colour = Entity)) +
  geom_line() + 
  geom_point() +
  labs(x = "Year",
       y = "Percentage",
       colour = "Region",
       title = "Prevalence of Obesity in Adults by Region from 1975 to 2014")
obesity_chart
```


## Final Note

Make sure to push all your commits and changes to GitHub before
submitting the exercise sheet.
